const search_input = require('search-input')
const select_button = require('buttons/select-button')
const sm_icon_button = require('buttons/sm-icon-button')
const year_button = require('buttons/year-button')
/******************************************************************************
  TIMELINE FILTER COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = timeline_filter
// ----------------------------------------
function timeline_filter (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { img_src : { icon_arrow_up = `${prefix}/icon_arrow_up.svg` }} = opts.data
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { update_timeline_filter }
  const up_channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="filter_wrapper">
    <div class="timeline_filter">
      <div class="date_wrapper"></div>
    </div>
  </div>`
  const timeline_filter = shadow.querySelector('.timeline_filter')
  const date_wrapper = shadow.querySelector('.date_wrapper')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // search project
    const on = { 'value': on_value }
    const protocol = use_protocol('search_project')({ state, on })
    const search_opts = opts 
    const element = shadowfy()(search_input(search_opts, protocol))
    timeline_filter.prepend(element)
    function on_value (message) {
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        refs: { cause: message.head },
        type: 'value',
        data: message.data
      })
    }
  }
  { // tag button
    const on = { 'value': on_value }
    const protocol = use_protocol('tag_button')({ state, on })
    const tag_opts = { data: opts.data, name: 'TAGS', choices: opts.tags }
    const element = shadowfy()(select_button(tag_opts, protocol))
    timeline_filter.prepend(element)
    function on_value (message) {
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        refs: { cause: message.head },
        type: 'value',
        data: message.data
      })
    }
  }
  { // status button
    const on = { 'value': on_value }
    const protocol = use_protocol('status_button')({ state, on })
    const status_opts = { data: opts.data, name: 'STATUS', choices: ['ACTIVE', 'INACTIVE', 'PAUSED'] }
    const element = shadowfy()(select_button(status_opts, protocol))
    timeline_filter.prepend(element)
    function on_value (message) {
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        refs: { cause: message.head },
        type: 'value',
        data: message.data
      })
    }
  }
  { // month button
    const on = { 'click': on_click }
    const protocol = use_protocol('month_button')({ state, on })
    const opts = { src: icon_arrow_up, activate: true }
    const element = shadowfy()(sm_icon_button(opts, protocol))
    date_wrapper.append(element)
    function on_click (message) {
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        type: 'toggle_month_filter'
      })
    }
  }
  { // year button
    const on = { 'click': on_click }
    const protocol = use_protocol('year_button')({ state, on })
    const year_opts = { data: opts.data, latest_date: opts.latest_date }
    const element = shadowfy()(year_button(year_opts, protocol))
    date_wrapper.append(element)
    function on_click (message) {
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        refs: { cause: message.head },
        type: 'toggle_year_filter'
      })
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function update_timeline_filter (message) {
    const channel = state.net[state.aka.year_button]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      refs: { cause: message.head },
      type: 'update_label',
      data: message.data
    })
  }
}
function get_theme () {
  return `
    .filter_wrapper {
      container-type: inline-size;
      position:relative;
      z-index:4;
    }
    .timeline_filter {
      display: grid;
      grid-template-columns: 12fr;
      align-items: flex-end;   
    }
    .date_wrapper {
      display: grid;
      grid-template-columns: 1fr 12fr;
    }
    @container (min-width: 450px) {
      .filter_wrapper {
      }
      .timeline_filter {
        grid-template-columns: 1fr 1fr 9fr .5fr;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
const icon_button = require('buttons/icon-button')
const logo_button = require('buttons/logo-button')
const text_button = require('buttons/text-button')
/******************************************************************************
  NAVBAR COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet()
sheet.replaceSync(get_theme())
const default_opts = { page: 'HOME' }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = navbar
// ----------------------------------------
function navbar (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // Local Storage
  // ----------------------------------------
  status.theme_dark =  localStorage.getItem('themeStatus') === 'true'
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data, page = default_opts.page } = opts
  // Assigning all the icons
  const {
    icon_info,
    icon_blogger,
    icon_discord,
    icon_twitter,
    icon_github,
    icon_mastodon,
    icon_opencollective,
    icon_terminal,
    icon_theme,
    icon_arrow_down,
    icon_arrow_up
  } = data.img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 
    'theme': handle_active_change,
    'do_page_change': do_page_change,
    'change_highlight': change_highlight,
    'toggle_terminal': on_toggle_terminal
  }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="navbar_wrapper">
    <div class="navbar">
      <div class="nav_toggle_wrapper">
        <div class="info_wrapper"></div>
        <div class="logo_wrapper"></div>
        <div class="nav_toggle"></div>
      </div>
      <div class="page_btns_wrapper"></div>
      <div class="icon_btn_wrapper"></div>
    </div>
  </div>`
  const navbar = shadow.querySelector('.navbar')
  const text_wrapper = shadow.querySelector('.page_btns_wrapper')
  const icon_wrapper = shadow.querySelector('.icon_btn_wrapper')
  // ----------------------------------------
  const info_sh = shadow.querySelector('.info_wrapper').attachShadow(shopts)
  const logo_sh = shadow.querySelector('.logo_wrapper').attachShadow(shopts)
  const nav_sh = shadow.querySelector('.nav_toggle').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // info button
    const petname = 'INFO'
    const on = { 'click': onclick }
    const protocol = use_protocol(petname)({ state, on })
    const opts = { src: icon_info }
    const element = icon_button(opts, protocol)
    const channel = state.net[state.aka.INFO]
    info_sh.append(element)
    function onclick (message) { // receive click from a button -> that button will become active!
      const active_id = state.status.active_button
      const default_id = state.aka[page] // only exists because it got initialized first (timing issue?)
      if (active_id === channel.send.id && active_id === default_id) return // means default is already active
      // @TODO: maybe change logic to be able to toggle an "empty desktop" too?
      const [
        next_id, data
      ] = active_id === channel.send.id ? [default_id, page] : [channel.send.id, petname]
      const be_channel = state.net[next_id]
      const ex_channel = state.net[active_id] // active button
      const up_channel = state.net[state.aka.up] // parent element
      do_page_change(data, message.head, { be_channel, ex_channel, up_channel })
    }
  }
  { // logo button
    const on = {}
    const protocol = use_protocol('logo_button')({ state, on })
    const element = logo_button(opts, protocol)
    logo_sh.append(element)
  }
  { // nav toggle button
    const on = { 'click': onclick }
    const protocol = use_protocol('navtoggle')({ state, on })
    const opts = { src: icon_arrow_down, src_active: icon_arrow_up, activate: true }
    const element = icon_button(opts, protocol)
    const channel = state.net[state.aka.navtoggle]
    nav_sh.append(element)
    function onclick (message) {
      state.status.dropdown_collapsed = !state.status.dropdown_collapsed
      navbar.classList.toggle('active', state.status.dropdown_collapsed)
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { cause: message.head },
        type: state.status.dropdown_collapsed ? 'activate' : 'deactivate',
      })
    }
  }
  { // text buttons
    const names = ['HOME', 'PROJECTS', 'DAT_GARDEN', 'TIMELINE']
    function make_button (text) {
      const petname = text
      const on = { 'click': onclick }
      const protocol = use_protocol(petname)({ state, on })
      const opts = { text }
      const element = shadowfy({ className: 'text_button_wrapper' })(text_button(opts, protocol))
      const channel = state.net[state.aka[petname]]
      return element
      function onclick (message) { // receive click from a button -> that button will become active!
        const active_id = state.status.active_button
        const default_id = state.aka[page] // only exists because it got initialized first (timing issue?)
        if (active_id === channel.send.id && active_id === default_id) return // means default is already active
        // @TODO: maybe change logic to be able to toggle an "empty desktop" too?
        const [
          next_id, data
        ] = active_id === channel.send.id ? [default_id, page] : [channel.send.id, petname]
        const be_channel = state.net[next_id]
        const ex_channel = state.net[active_id] // active button
        const up_channel = state.net[state.aka.up] // parent element
        do_page_change(data, message.head, { be_channel, ex_channel, up_channel })
      }
    }
    const elements = names.map(make_button)
    text_wrapper.append(...elements)
  }
  { // social buttons
    const socials = [{
      name: 'blog_button',
      src: icon_blogger,
      activate: false,
      link: 'https://blog.dat-ecosystem.org/'
    }, {
      name: 'discord_button',
      src: icon_discord,
      activate: false,
      link: 'https://discord.com/invite/egsvGc9TkQ'
    }, {
      name: 'twitter_button',
      src: icon_twitter,
      activate: false,
      link: 'https://twitter.com/dat_ecosystem'
    }, {
      name: 'github_button',
      src: icon_github,
      activate: false,
      link: 'https://github.com/dat-ecosystem'
    }, {
      name: 'mastodon_button',
      src: icon_mastodon,
      activate: false,
      link: 'https://fosstodon.org/@dat_ecosystem'
    }, {
      name: 'opencollective_button',
      src: icon_opencollective,
      activate: false,
      link: 'https://opencollective.com/dat'
    }
  ]
    function make_button ({ name: petname, src, activate, link }) {
      const on = { 'click': onclick }
      const protocol = use_protocol(petname)({ state, on })
      const opts = { src, activate, link }
      const element = shadowfy({ className: '' })(icon_button(opts, protocol))
      return element
      function onclick (message) {
        const up_channel = state.net[state.aka[petname]]
        const [by, to, mid] = [id, up_channel.send.id, up_channel.mid++]
        up_channel.send({
          head: [by, to, mid],
          refs: { cause: message.head },
          type: 'activate',
        })
      }
    }
    const elements = socials.map(make_button)
    icon_wrapper.append(...elements)
  }
  { // terminal button
    const petname = 'terminal_button'
    const on = { 'click': onclick }
    const protocol = use_protocol(petname)({ state, on })
    const opts = { src: icon_terminal, inverse: true }
    const element = icon_button(opts, protocol)
    icon_wrapper.append(element)
    function onclick (message) {
      const up_channel = state.net[state.aka.up]
      const [by, to, mid] = [id, up_channel.send.id, up_channel.mid++]
      up_channel.send({
        head: [by, to, mid],
        refs: { cause: message.head },
        type: 'toggle_terminal',
      })
    }
  }
  { // theme button
    const petname = 'theme_button'
    const on = { 'click': onclick }
    const protocol = use_protocol(petname)({ state, on })
    const opts = { src: icon_theme, activate: true, inverse: true }
    const element = icon_button(opts, protocol)
    const channel = state.net[state.aka.theme_button]
    icon_wrapper.append(element)
    function onclick (message) {
      status.theme_dark = !status.theme_dark
      localStorage.setItem('themeStatus', status.theme_dark)

      const up_channel = state.net[state.aka.up]
      const [by, to, mid] = [id, up_channel.send.id, up_channel.mid++]
      up_channel.send({
        head: [by, to, mid],
        refs: { cause: message.head },
        type: 'handle_theme_change',
        data: ''
      })
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { cause: message.head },
        type: state.status.theme_dark ? 'activate' : 'deactivate',
      })
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  initialize(page)
  if(status.theme_dark){
    const up_channel = state.net[state.aka.up]
    const [by, to, mid] = [id, up_channel.send.id, up_channel.mid++]
    up_channel.send({
      head: [by, to, mid],
      type: 'handle_theme_change',
      data: ''
    })
    const channel = state.net[state.aka.theme_button]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'activate'
    })
  }

  return el

  function initialize (page) {
    // SET DEFAULTS
    state.status.active_button = state.aka[page]
    const active_id = state.status.active_button
    const be_channel = state.net[active_id]
    const up_channel = state.net[state.aka.up]

    // APPLY OPTS (1):
    // @TODO: issue: how to submit an `onclick` event to trigger the initial change?

    const [by, to, mid] = [id, id, 0] // @TODO: improve self messaging
    let message = { head: [by, to, mid], type: 'init' }
    do_page_change(page, message.head, { be_channel, up_channel })
  }
  function handle_active_change (message) { // handle on
    const { data: active_page } = message

    console.log('INITIALIZE', {active_page, active_id: state.aka[active_page] })

    state.status.active_button = state.aka[active_page]
    // APPLY OPTS (2):
    // @TODO: PROBLEM: this makes navbar know what is active, but it doesnt highlight it yet
  }
  function do_page_change (page, head, { be_channel, ex_channel, up_channel }) {
    if (ex_channel) ex_channel.send({ // old active nav button
      head: [id, ex_channel.send.id, ex_channel.mid++],
      refs: { cause: head },
      type: 'deactivate',
    })
    if (be_channel) be_channel.send({ // new active nav button
      head: [id, be_channel.send.id, be_channel.mid++],
      refs: { cause: head },
      type: 'activate',
    })
    if (up_channel) up_channel.send({ // send parent to update page content
      head: [id, up_channel.send.id, up_channel.mid++],
      refs: { cause: head },
      type: 'handle_page_change',
      data: page
    })
    state.status.active_button = be_channel.send.id
  }
  function change_highlight ( {head, data: page} ) {
    const ex_channel = state.net[state.status.active_button]
    state.status.active_button = state.aka[page]
    const be_channel = state.net[state.status.active_button]
    if (ex_channel) ex_channel.send({ // old active nav button
      head: [id, ex_channel.send.id, ex_channel.mid++],
      refs: { cause: head },
      type: 'deactivate',
    })
    if (be_channel) be_channel.send({ // new active nav button
      head: [id, be_channel.send.id, be_channel.mid++],
      refs: { cause: head },
      type: 'activate',
    })
  }
  function on_toggle_terminal () {
    state.status.terminal_collapsed = !state.status.terminal_collapsed
    const channel = state.net[state.aka.terminal_button]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: state.status.terminal_collapsed ? 'activate' : 'deactivate',
    })
  }
}
function get_theme () {
  return `
    .navbar_wrapper {
      container-type: inline-size;
      width: 100%;
    }
    .navbar {
      display: block;
      width: 100%;
      height: 40px;
      overflow: hidden;
      border-bottom: 1px solid var(--primary_color);
      --s: 15px; /* control the size */
      --_g: var(--bg_color_2) /* first color */ 0 25%, #0000 0 50%;
      background:
          repeating-conic-gradient(at 33% 33%,var(--_g)),
          repeating-conic-gradient(at 66% 66%,var(--_g)),
          var(--bg_color_3);  /* second color */
      background-size: var(--s) var(--s);
    }
    .navbar.active {
      height: max-content;
    }
    .nav_toggle_wrapper {
      display: flex;
      width:1 00%;
      justify-content: stretch;
    }
    .nav_toggle_wrapper .logo_wrapper{
      width: 100% !important;
      flex-grow: 1;
    }
    .nav_toggle_wrapper .nav_toggle {
      display: block;
    }
    .page_btns_wrapper {
      width: 100%;
      display: flex;
      flex-direction: column;
    }
    .page_btns_wrapper .text_button_wrapper {
      width: 100%;
      flex-grow: 1;
    }
    .icon_btn_wrapper {
      display: flex;
      justify-content: flex-start;
    }
    @container(min-width: 899px) {
      .navbar_wrapper .navbar {
        display: flex;
      }
      .navbar_wrapper .navbar .nav_toggle_wrapper {
        width: max-content;
        display: flex;
      }
      .nav_toggle_wrapper .logo_wrapper {
        width: max-content !important;
      }
      .nav_toggle_wrapper .nav_toggle {
        display: none;
      }
      .navbar_wrapper .navbar .page_btns_wrapper {
        flex-direction: row;
      }
      .page_btns_wrapper .text_button_wrapper {
        width: max-content !important;
        flex-grow: unset;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
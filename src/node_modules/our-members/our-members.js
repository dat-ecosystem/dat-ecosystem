const window_bar = require('window-bar')
const members = require('./members.json');

/******************************************************************************
  OUR MEMBERS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = our_members
// ----------------------------------------
function our_members (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_pdf_reader
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 'show': on_show, 'hide': on_hide }
  const channel = use_protocol('up')({ protocol, state, on })
  function on_show (message) {
    our_members_wrapper.style.display = 'inline'
  }
  function on_hide (message) {
    our_members_wrapper.style.display = 'none'
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="our_member">
    <div class="windowbar"></div>
    <div class="member_content">
      <h2>## our members</h2>
    </div>
  </div>`

  // Function to create a table from the members data
  function createTable(data) {
    const tableHeader = '<thead><tr><td> no. </td><td> name </td><td> organization </td></tr></thead>'
    const tableRows = data.map((member, index) => {
      const anchorLink = `<a href="${member.link}" target="_blank">${member.name}</a>`
      return `<tr><td> ${index + 1} </td><td> ${anchorLink} </td><td> ${member.organization}  </td></tr>`
    })
    const table = `<table>${tableHeader}<tbody>${tableRows}</tbody></table>`
    return table
  }

  const tableHTML = createTable(members)
  const tempContainer = document.createElement('div')
  tempContainer.innerHTML = tableHTML
  const tableElement = tempContainer.querySelector('table')
  const memberContent = shadow.querySelector('.member_content')
  memberContent.appendChild(tableElement)



  const our_members_wrapper = shadow.querySelector('.our_member')
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = {
      'toggle_active_state': toggle_active_state
    }
    const protocol = use_protocol('windowbar')({ state,  on })
    const opts = {
      name:'our_members.md', 
      src: icon_pdf_reader,
      close_button: true,
      data
    }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
    async function toggle_active_state (message) {
      const { active_state } = message.data
      if (active_state === 'active') our_members_wrapper.style.display = 'none'
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el
}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
    }
    .our_member {
      display: none;
    }
    .member_content {
      position: relative;
      display: flex;
      flex-direction: column;
      width: 100vw;
      height: calc(100vh - 72px);
      padding: 10px;
      background-size: 10px 10px;
      background-color: var(--bg_color);
      border: 1px solid var(--primary_color);
    }
    .member_content h2 {
      margin: 0;
    }
    .member_content table {
      border-collapse: collapse;
    }
    .member_content table thead {
      font-weight: bold;
    }
    .member_content table td {
      border: 1px solid var(--primary_color);
      padding: 8px 4px;
    }
    @container (min-width: 510px) {
      .our_member .member_content {
        width: auto;
        height: auto;
        margin-bottom: 30px;
      }
      .member_content table td {
        padding: 8px;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
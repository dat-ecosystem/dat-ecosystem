const window_bar = require('window-bar')
/******************************************************************************
  COMING SOON COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = commingsoon
// ----------------------------------------
function commingsoon (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    banner_cover = `${prefix}/banner_cover.svg`,
    tree_character = `${prefix}/tree_character.png`,
    icon_pdf_reader_solid = `${prefix}/icon_pdf_reader_solid.svg`,
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="cover_wrapper">
    <div class="windowbar"></div>
    <div class="cover_content">
      <div class="cover_image">
        <img src="${banner_cover}" />
      </div>
      <div class="content_wrapper">
        <img src="${tree_character}" />
        Coming Soon
      </div>
    </div>
  </div>`
  const cover_wrapper = shadow.querySelector('.cover_wrapper')
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = { 'toggle_active_state': toggle_active_state }
    const protocol = use_protocol('windowbar')({ state, on })
    const opts = {
      name: 'post-growth-program.pdf', 
      src: icon_pdf_reader_solid,
      data
    }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
    async function toggle_active_state (message) {
      const { active_state } = message.data
      if (active_state === 'active') el.style.display = 'none'
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el
}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
    }
    .cover_content {
      position: relative;
      height: max-content;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 100px 0px;
      background-image: radial-gradient(var(--primary_color) 1px, var(--bg_color) 1px);
      background-size: 10px 10px;
      background-color: var(--bg_color);
      border: 1px solid var(--primary_color);
      margin-bottom: 30px;
    }
    /* This covers background-image will change to an image */
    .cover_content .cover_image {
      position: absolute;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    .cover_content .cover_image img {
      position: absolute;
      left: 50%;
      top: 50%;
      width: auto;
      height: 100%;
      transform: translate(-50%, -50%);
    }
    /* Cover image alignment */
    .cover_content .content_wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 20px;
      position: relative;
      z-index: 1;
      color: var(--primary_color);
      text-align: center;
    }
    .cover_content .content_wrapper img {
      width: 86vw;
      height: auto;
    }

    @container (min-width: 510px) {
      .cover_content .content_wrapper img {
        width: 400px;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
const window_bar = require('window-bar')
/******************************************************************************
  WINDOW BAR COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = app_about_us
// ----------------------------------------
function app_about_us (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src: { 
    about_us_cover,
    icon_pdf_reader_solid = `${prefix}/icon_pdf_reader_solid.svg`,
  } } = data

  const content = require(`../data/data.json`).home.about_us

  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="about_us_window">
    <div class="windowbar"></div>
    <div class="about_us_wrapper">
      <div class="about_us_cover_image">
        <img src="${about_us_cover}"/>
      </div>
      <div class="content_wrapper">
        <div class="img"></div>
        <div class="title"> ABOUT US </div>
      </div>
    </div>
    <div class="about_us_desc">
    ${content} <span class="about_us_link">dat-ecosystem visualization</span> to explore the whole universe of dat projects and the relationships between them.
    </div>
  </div>`
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  const about_us_link = shadow.querySelector('.about_us_link')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = {
      'toggle_active_state': toggle_active_state,
      'open_info_page': open_info_page
    }
    const protocol = use_protocol('windobar')({ state, on })
    const opts = {
      name:'Learn_about_us.pdf', 
      src: icon_pdf_reader_solid,
      action_buttons: [
        {text: 'IMPORTANT DOCUMENTS', action: 'open_info_page', activate: false}
      ],
      data
    }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
    async function toggle_active_state ({ data }) {
      const { active_state } = data
      if (active_state === 'active') el.style.display = 'none'
    }
    async function open_info_page (message){
      open_page ('INFO')
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'open_important_documents',
        data: ''
      })
    }
  }
  about_us_link.onclick = () => open_page ('PROJECTS')
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  async function open_page (page){
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'navigate',
      data: page
    })
  }
}
function get_theme () {
  return `
  * {
    box-sizing: border-box;
  }
  .about_us_window {
    display: flex;
    flex-direction: column;
  }
  .about_us_wrapper {
    position: relative;
    height: max-content;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 150px 0px;
    background-image: radial-gradient(var(--primary_color) 1px, var(--bg_color) 1px);
    background-size: 10px 10px;
    background-color: red;
    border: 1px solid var(--primary_color);
    box-sizing: border-box;
    container-type: inline-size;
  }
  .about_us_wrapper .about_us_cover_image {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
  .about_us_wrapper .about_us_cover_image img {
    position: absolute;
    left: 50%;
    top: 50%;
    width: auto;
    height: 80%;
    transform: translate(-50%, -50%);
  }
  .about_us_wrapper .content_wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0px;
    position: relative;
    z-index: 1;
    color: var(--primary_color);
    text-align: center;
    margin: 10px;
  }
  .about_us_wrapper .content_wrapper .img{
    background-image: var(--img_robot_3);
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    width: 122px;
    height: 190px;
  }
  .about_us_wrapper .content_wrapper .title {
    font-size: 40px;
  }
  .about_us_desc {
    width: 100% !important;
    background-color: var(--bg_color);
    color: var(--primary_color);
    border: 1px solid var(--primary_color);
    padding: 10px;
    letter-spacing: -2px;
    line-height: 18px;
    font-size: 16px;
    margin-bottom: 30px;
  }
  .about_us_link {
    color: blue;
    text-decoration: underline;
    cursor: pointer;
  }
  @container (min-width: 856px) {
    .about_us_wrapper .about_us_cover_image img {
      width: 100%;
      height: auto;
    }
  }
  @container (min-width: 510px) {
    .about_us_wrapper .content_wrapper {
      gap: 20px;
    }
  }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
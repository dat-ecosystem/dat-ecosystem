const window_bar = require('window-bar')
const sm_text_button = require('buttons/sm-text-button')
/******************************************************************************
  APP FOOTER COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = app_footer
// ----------------------------------------
function app_footer (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src: {
    icon_pdf_reader_solid = `${prefix}/icon_pdf_reader_solid.svg`,
    img_robot_2 = `${prefix}/img_robot_2.png`,
    pattern_img_1 = `${prefix}/pattern_img_1.png`,
  } } = data
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="main_wrapper">
    <div class="windowbar"></div>
    <div class="footer_wrapper">
      <div class="robot_img_2">
        
        <div class="img"></div>
      </div>
      <div class="footer_info_wrapper">
        <div class="title"> Interested in learning more about the Dat Ecosystem? </div>
        <div class="desc"> Join our <a target="_blank" href="https://discord.gg/egsvGc9TkQ">chat</a> and discuss tech, society, funding and your project development with the community. But you can also subscribe to the newsletter updates! </div>
        <div class="apply_button"></div>
      </div>
    </div>
    <div class="pattern_img"><img src="${pattern_img_1}"></div>
  </div>`
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  const apply_button_shadow = shadow.querySelector('.apply_button').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // join_program_button
    const on = { 'click': click}
    const protocol = use_protocol('join_button')({ state, on })
    const opts = { activate: false, text: '<a style="display: block; width: 100%; text-decoration: none; color: var(--primary-color);" href="mailto:dat-ecosystem-subscribe@lists.riseup.net?subject=subscribe&body=You are subscribing to Dat ecosystem mailing list. We are glad to have you here! Each received newsletter will include an unsubscribe link, but you can always unsubscribe by sending an email to:%0D%0A%0D%0Amailto:dat-ecosystem-unsubscribe@lists.riseup.net" target="_blank"> Join the newsletter </a>' }
    const element = sm_text_button(opts, protocol)
    apply_button_shadow.append(element)
    async function click( message ){}
  }
  { // footer window
    const on = {
      'toggle_active_state': toggle_active_state
    }
    const protocol = use_protocol('footer')({ state, on })
    const opts = { name: 'FOOTER.pdf', src: icon_pdf_reader_solid, data }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  async function toggle_active_state ({ data }) {
    const { active_state } = data
    if (active_state === 'active') el.style.display = 'none'
  }
}
function get_theme () {
  return `
    * { box-sizing: border-box; }
    .main_wrapper {
      box-sizing: border-box;
      position: relative;
      container-type: inline-size;
      background-color: var(--bg_color);
      border: 1px solid var(--primary_color);
      margin-bottom: 30px;
    }
    .main_wrapper .footer_wrapper {
      display: flex;
      flex-direction: column-reverse;
      align-items: flex-start;
      padding: 20px 20px 0 20px;
    }
    
    .main_wrapper .footer_wrapper .robot_img_2{
      width:180px;
    }
    .main_wrapper .footer_wrapper .robot_img_2 .img{
      background-image: var(--img_robot_2);
      background-size: cover;
      background-position: center;
      width: 180px;
      height:200px;
    }
    .main_wrapper .footer_wrapper .footer_info_wrapper{
      margin-bottom: 30px;
    }
    .main_wrapper .footer_wrapper .footer_info_wrapper .title {
      font-size: 40px;
      color: var(--primary_color);
      font-weight: 700;
      line-height: 36px;
      letter-spacing: -5px;
      margin-bottom: 10px;
    }
    .main_wrapper .footer_wrapper .footer_info_wrapper .desc {
      font-size: 16px;
      color: var(--primary_color);
      line-height: 14px;
      letter-spacing: -2px;
      margin-bottom: 30px;
    }
    .main_wrapper .pattern_img {
      display:none;
    }
    @container (min-width: 856px) {
      .main_wrapper {
        .footer_wrapper {
          gap: 40px;
          flex-direction: row;
          align-items: flex-end;
          width: 70%;
        }
      }
      .main_wrapper .pattern_img {
        display: block;
        position: absolute;
        top: 0;
        right: 0;
      }
      .main_wrapper .pattern_img img {
        width: 300px;
        height: auto;
      }
      .main_wrapper .footer_wrapper {
        padding: 20px 20px 0 0;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
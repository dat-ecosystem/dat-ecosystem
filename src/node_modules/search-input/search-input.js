/******************************************************************************
  SEARCH INPUT COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = search_input
// ----------------------------------------
function search_input (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src: {
      icon_search = `${prefix}/icon_search.svg`,
  } } = data
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="search_input">
    <input class="input" type="text" placeholder="SEARCH...">
      ${icon_search}
    </input>
  </div>`
  const input = shadow.querySelector('.input')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  input.oninput = oninput
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function oninput (e) {
    const { value } = e.target
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'value',
      data: { filter: 'SEARCH', value }
    })
  }
}
function get_theme () {
  return `
  .search_input {
    width: 100%;
    min-width: 100% !important;
    height: 30px;
    max-height: 40px;
    position: relative;
    flex-grow: 1;
  }
  .search_input input {
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    border: 2px solid var(--primary_color);
    padding: 10px 40px 10px 5px;
    outline: none;
    font-family: Silkscreen;
    font-size: 18px;
    letter-spacing: -1px;
    background-color: var(--bg_color);
    color: var(--primary-color);
  }
  .search_input input:focus {
    border-color: var(--ac-1) !important;
  }
  .search_input svg {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: auto;
  }
  .search_input svg * {
    fill: var(--primary_color);
  }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
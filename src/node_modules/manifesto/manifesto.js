const window_bar = require('window-bar')
const scrollbar = require('scrollbar')
/******************************************************************************
  MISSION STATEMENT COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = manifesto
// ----------------------------------------
function manifesto (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_pdf_reader
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 'show': on_show, 'hide': on_hide }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="mission_statement">
    <div class="window_bar_wrapper"></div>
    <div class="main_wrapper">

      <div class="mission_content">
        <h2># MANIFESTO </h2>
        <p>We, the "Dat Ecosystem" members, come together to achieve the following goals:</p>
        <ul>
          <li>Share our knowledge on building decentralized systems.</li>
          <li>Publish our work under permissive, open culture, licenses.</li>
          <li>Build decentralized systems that profit the general public and empower users.</li>
          <li>Have dat protocols (e.g. <a href="https://hypercore-protocol.org/" target="_blank">hypercore-protocol</a> or similar) as a foundation of our work.</li>
          <li>Promote our shared goals with the public.</li>
          <li>Develop solutions to shared technical problems.</li>
          <li>Find and invite new members that share our goals.</li>
          <li>Promote the adoption of shared technology through documentation or standardization.</li>
        </ul>
        <p>This group is <b>governed by individuals</b> that form together "<i>the Consortium</i>". The Consortium works to:</p>
        <ul>
          <li>Enact our <a href="https://github.com/dat-ecosystem/organization/blob/main/code-of-conduct.md" targer="_blank">code of conduct</a>.</li>
          <li>Raise and maintain funds and assets to fulfill the goals.</li>
          <li>Use decentralized systems wherever feasible.</li>
          <li>Publicly and transparently document the process and offer the public a means to comment.</li>
          <li>Coordinate efforts by members.</li>
          <li>Communicate on <a href="https://github.com/dat-ecosystem/dat-ecosystem.github.io#join-the-dat-ecosystem-chat-network" target="_blank">discord/cabal</a> </li>
        </ul>
        <p>
          Proposals are submitted as pull requests to /consortium/decisions/{YYY}.{MM}.{DD}-{proposal_name}.md in <a href="https://github.com/dat-ecosystem/organization/tree/main" target="_blank">organization repository.</a><br>
          Proposals to change the manifesto are submitted as pull requests to change the manifesto itself.<br>
          Proposer needs to tag all consortium members in the pull request and notify consortium members in the active consortium communication channel.<br>
        </p> 
        <p>
          Decisions will be done through voting by consortium members. The voting period lasts 2 weeks.<br>
          Regular voting items are accepted unless there is opposition by at least one Consortium member. Members may state opposition beforehands.<br>
        </p>   
        <p>
          The addition of a member or changes to this Manifesto requires unanimous support by all Consortium members.<br>
          The removal of one member requires unanimous support by all Consortium members except by the member in question.<br>
          After a consortium member is tagged in a proposals pull request and the consortium communication channel and that member does not respond within 3 months, their consortium membership becomes dormant, which means they do not count as consortium member in the context of deciding about any proposals.<br>
          Dormant consortium members can reactivate themselves at any given time to become normal consortium members again unilateraly.<br>
          Consortium Members can end their consortium membership and remove themselves from the consortium membership list at any given time unilateraly.<br>
        </p>
        <p>Consortium members <i>(alphabetic order)</i>:</p>
        <ul>
          <li><a href="https://github.com/cblgh" target="_blank">Alexander Cobleigh</a></li>
          <li><a href="https://github.com/serapath" target="_blank">Alexander Praetorius</a></li>
          <li><a href="https://github.com/dpaez" target="_blank">Diego Paez</a></li>
          <li><a href="https://github.com/frando" target="_blank">Franz Heinzmann</a></li>
          <li><a href="https://github.com/zootella" target="_blank">Kevin Faaborg</a></li>
          <li><a href="https://github.com/nbreznik" target="_blank">Nina Breznik</a></li>
        <ul>
      </div>

    </div>
  </div>`
  const mission_statement_wrapper = shadow.querySelector('.mission_statement')
  const mission_content = shadow.querySelector('.mission_content')
  const main_wrapper = shadow.querySelector('.main_wrapper')
  // ----------------------------------------
  const window_bar_wrapper = shadow.querySelector('.window_bar_wrapper').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = {
      'toggle_active_state': toggle_active_state
    }
    const protocol = use_protocol('windowbar')({ state, on })
    const opts = {
      name: 'manifesto.md', 
      src: icon_pdf_reader,
      close_button: true,
      data
    }
    const element = window_bar(opts, protocol)
    window_bar_wrapper.append(element)
    async function toggle_active_state (message) {
      const { active_state } = message.data
      if (active_state === 'active') mission_statement_wrapper.style.display = 'none'
    }
  }
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, status: onstatus }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
    opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down  
    const scroll_opts = { data }
    const element = scrollbar(scroll_opts, protocol)

    const channel = state.net[state.aka.scrollbar]
    mission_content.onscroll = onscroll
    ro.observe(main_wrapper)

    main_wrapper.append(shadowfy()(element))

    function onscroll (event) {
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { },
        type: 'handle_scroll',
      })
    }
    function on_set_scroll (message) {
      console.log('set_scroll', message) 
      setScrollTop(message.data)
    }
    function onstatus (message) {
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { cause: message.head },
        type: 'update_size',
        data: {
          sh: mission_content.scrollHeight,
          ch: mission_content.clientHeight,
          st: mission_content.scrollTop
        }
      })
    }
    function setScrollTop (value) {
      mission_content.scrollTop = value
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function on_show (message) {
    mission_statement_wrapper.style.display = 'inline'
  }
  function on_hide (message) {
    mission_statement_wrapper.style.display = 'none'
  }
}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
      color: var(--primary_color);
    }
    .mission_statement {
      display: none;
    } 
    .main_wrapper{
      display: flex;
      --s: 15px; /* control the size */
      --_g: var(--bg_color_2) /* first color */ 0 25%, #0000 0 50%;
      background:
        repeating-conic-gradient(at 33% 33%,var(--_g)),
        repeating-conic-gradient(at 66% 66%,var(--_g)),
        var(--bg_color_3);  /* second color */  
      background-size: var(--s) var(--s);  
      border: 1px solid var(--primary_color);
      margin-bottom: 30px;
    }
    .mission_statement .mission_content {
      position: relative;
      display: flex;
      flex-direction: column;
      font-size:0.87em;
      letter-spacing: -1px;
      line-height: 18px;
      width: 100%;
      height: 100vh;
      padding: 10px;
      overflow:scroll;
      scrollbar-width: none; /* For Firefox */
      background-size: 10px 10px;
      border: 1px solid var(--primary_color);
      background-color: var(--bg_color);
    }
    a{
      color:blue;
    }
    .mission_statement .mission_content::-webkit-scrollbar {
      display: none;
    }
    .mission_statement .mission_content h2 {
      margin: 0;
    }
    @container (min-width: 510px) {
      .mission_statement .mission_content {
        width: auto;
        height: 100%;
        max-width:1200px;
        max-height:600px;
      }
      .mission_statement {
        display: inline;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}
const sm_icon_button_alt = require('buttons/sm-icon-button-alt')
const sm_text_button = require('buttons/sm-text-button')
/******************************************************************************
  WINDOW BAR COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = window_bar
// ----------------------------------------
function window_bar (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const {
    icon_close_light, 
    icon_arrow_down_light, 
    icon_arrow_up_light
  } = opts.data.img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const up_channel = use_protocol('up')({ protocol, state })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="window_bar">
    <div class="data_type_icon"></div>
    <div class="application_name"><span>${opts.name}</span></div>
    <div class="window_bar_actions">
    <div class="actions_wrapper"></div>
    <div class="actions_toggle_btn"></div>
    </div>
  </div>`
  const window_bar_actions = shadow.querySelector('.window_bar_actions')
  const actions_wrapper = shadow.querySelector('.actions_wrapper')
  // ----------------------------------------
  const actions_toggle_btn_shadow = shadow.querySelector('.actions_toggle_btn').attachShadow(shopts)
  const data_type_icon_shadow = shadow.querySelector('.data_type_icon').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // data type icon
    const on = { 'click': on_click }
    const protocol = use_protocol('data_type_icon')({ state, on })
    const data_type_opts = { src: opts.src }
    const element = sm_icon_button_alt(data_type_opts, protocol)
    data_type_icon_shadow.append(element)
    function on_click (message) {
      console.log('data program type:', null)
    }
  }
  if (opts.action_buttons) {
    { // action buttons
      function make_element ({text, action: type, activate}, i) {
        const on = { 'click': onclick }
        const protocol = use_protocol(text)({ state, on })
        const opts = { toggle: true, text, activate }
        const element = shadowfy()(sm_text_button(opts, protocol))
        return element
        function onclick (message) {
          up_channel.send({
            head: [id, up_channel.send.id, up_channel.mid++],
            type
          })
        }
      }
      const elements = opts.action_buttons.map(make_element)
      actions_wrapper.append(...elements)
    }
    { // responsive actions toggle
      const on = {
        'click': toggle_window_active_state
      }
      const protocol = use_protocol('windowbar')({ state, on })
      const toggle_opts = {
        src: icon_arrow_down_light,
        src_active: icon_arrow_up_light
      }
      const element = sm_icon_button_alt(toggle_opts, protocol)
      actions_toggle_btn_shadow.append(element)
      async function toggle_window_active_state (message) {
        const  { active_state } = message.data
        actions_wrapper.style.display = active_state ? 'none' : 'flex'
      }
    }
  }
  { // icon buttons
    if (opts.icon_buttons) {
      function make_element ({ icon, icon_active, toggle, action: type }, i) {
        const on = { 'click': onclick }
        const protocol = use_protocol(`${type}_${i}`)({ state, on })
        const icon_opts = { src: icon, src_active: icon_active, toggle }
        const element = shadowfy()(sm_icon_button_alt(icon_opts, protocol))
        return element
        function onclick (message) {
          up_channel.send({
            head: [id, up_channel.send.id, up_channel.mid++],
            type
          })
        }
      }
      const elements = opts.icon_buttons.map(make_element)
      window_bar_actions.append(...elements)
    }
  }
  { // close button
    if (opts.close_button){
      const on = { 'click': onclose }
      const protocol = use_protocol('close_window')({ state, on })
      const opts = { src: icon_close_light }
      const element = shadowfy()(sm_icon_button_alt(opts, protocol))
      window_bar_actions.append(element)
      function onclose (event) {
        up_channel.send({
          head: [id, up_channel.send.id, up_channel.mid++],
          type: 'toggle_active_state',
          data: { active_state : 'active' }
        })
      }
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el
}
function get_theme () {
  return `
    .window_bar {
      position: relative;
      z-index: 2;
      background-color: var(--primary_color);
      display: flex;
      width: 100%;
      justify-content: flex-start;
      background-size: 5px 5px;
      background-image: repeating-linear-gradient(0deg, var(--bg_color_2), var(--bg_color_2) 1px, var(--primary_color) 2px, var(--primary_color));
      container-type: inline-size;
      border: 1px solid var(--primary_color);
      box-sizing: border-box;
    }
    .window_bar_actions {
      margin-left: auto;
      display: flex;
    }
    .window_bar_actions.active .actions_wrapper {
      display: flex;
    }
    .actions_wrapper {
      display: none;
      position: absolute;
      flex-direction: column;
      z-index: 10;
      width: 100%;
      height: max-content;
      top: 30px;
      right: 0;
      background-color: var(--bg_color);
      border: 1px solid var(--primary_color);
    }
    .application_name {
      display: flex;
      align-items: center;
      min-height: 100%;
      width: max-content;
      color: var(--bg_color);
      padding: 0 10px;
      font-size: 14px;
      letter-spacing: -1px;
      box-sizing: border-box;
      border: 1px solid var(--primary_color);
      background-color: var(--primary_color);
    }
    @container (min-width: 856px) {
      .actions_toggle_btn {
        display: none;
      }
      .actions_wrapper {
        display: flex !important;
        position: relative;
        flex-direction: row;
        top: unset;
        right: unset;
        height: 100%;
        width: max-content;
        border: 0px;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}